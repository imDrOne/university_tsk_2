package ru.miit;import ru.miit.services.BreadthFirstSearch;import ru.miit.services.DepthFirstSearch;import ru.miit.services.FinderByDijkstra;import ru.miit.utils.Node;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class App {    public static void main(String[] args) {//        Weld weld = new Weld();//        WeldContainer container = weld.initialize();        final int V = 5;        int source = 0;        int[][] sourceMatrix = {                {0, 1, 9 },                {0, 2, 6 },                {0, 3, 5 },                {0, 4, 3 },                {2, 1, 2 },                {2, 3, 4 },        };        BreadthFirstSearch breadthFirstSearch = new BreadthFirstSearch();        DepthFirstSearch depthFirstSearch = new DepthFirstSearch();        FinderByDijkstra finderByDijkstra = new FinderByDijkstra();        breadthFirstSearch.init(V);        depthFirstSearch.init(V);        finderByDijkstra.init(V);        for (int[] pair : sourceMatrix) {            breadthFirstSearch.addEdge(pair[0], pair[1], pair[2]);            depthFirstSearch.addEdge(pair[0], pair[1], pair[2]);            finderByDijkstra.addEdge(pair[0], pair[1], pair[2]);        }        depthFirstSearch.find(source);        System.out.println();        breadthFirstSearch.find(source);        System.out.println();        finderByDijkstra.find(source);        System.out.println("The shorted path from node :");        for (int i = 0; i < finderByDijkstra.dist.length; i++)            System.out.println(source + " to " + i + " is "                    + finderByDijkstra.dist[i]);//        container.shutdown();    }}