package ru.miit;import ru.miit.services.BreadthFirstSearch;import ru.miit.services.DepthFirstSearch;import ru.miit.services.FinderByDijkstra;import ru.miit.utils.Node;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class App {    public static void main(String[] args) {//        Weld weld = new Weld();//        WeldContainer container = weld.initialize();        final int V = 5;        int source = 0;        int[][] sourceMatrix = {                {0, 1, 9 },                {0, 2, 6 },                {0, 3, 5 },                {0, 4, 3 },                {2, 1, 2 },                {2, 3, 4 },        };        BreadthFirstSearch finder = new BreadthFirstSearch(V);        DepthFirstSearch finder1 = new DepthFirstSearch(V);        finder.init(V);        finder1.init(V);        for (int[] pair : sourceMatrix) {            finder.addEdge(pair[0], pair[1]);            finder1.addEdge(pair[0], pair[1]);        }        finder1.DFS(source);        System.out.println();        finder.BFS(source);        System.out.println();        // Adjacency list representation of the        // connected edges        List<List<Node>> adj = new ArrayList<>();        // Initialize list for every node        for (int i = 0; i < V; i++) {            List<Node> item = new ArrayList<>();            adj.add(item);        }        // Inputs for the DPQ graph        adj.get(0).add(new Node(1, 9));        adj.get(0).add(new Node(2, 6));        adj.get(0).add(new Node(3, 5));        adj.get(0).add(new Node(4, 3));        adj.get(2).add(new Node(1, 2));        adj.get(2).add(new Node(3, 4));        // Calculate the single source shortest path        FinderByDijkstra dpq = new FinderByDijkstra();        dpq.init(V);        dpq.dijkstra(adj, source);        // Print the shortest path to all the nodes        // from the source node        System.out.println("The shorted path from node :");        for (int i = 0; i < dpq.dist.length; i++)            System.out.println(source + " to " + i + " is "                    + dpq.dist[i]);//        container.shutdown();    }}